// ---------------------------------------------------------------------------------------------------------------------
// Includes
// ---------------------------------------------------------------------------------------------------------------------
#include "vector.hpp"
#include "math.h"

// ---------------------------------------------------------------------------------------------------------------------
// Defines/macros
// ---------------------------------------------------------------------------------------------------------------------


// ---------------------------------------------------------------------------------------------------------------------
// Private variables
// ---------------------------------------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------------------------------------
// Private prototypes
// ---------------------------------------------------------------------------------------------------------------------


// ---------------------------------------------------------------------------------------------------------------------
// Private methods
// ---------------------------------------------------------------------------------------------------------------------



// ---------------------------------------------------------------------------------------------------------------------
// Public methods
// ---------------------------------------------------------------------------------------------------------------------
PVector::PVector(void) 
{
    this->x = 0.0;
    this->y = 0.0;
}
// ---------------------------------------------------------------------------------------------------------------------

PVector::PVector(float x, float y) 
{
    this->x = x;
    this->y = y;
}
// ---------------------------------------------------------------------------------------------------------------------

PVector& PVector::add(PVector& v) {
    this->x += v.x;
    this->y += v.y;
    return *this;
}
// ---------------------------------------------------------------------------------------------------------------------

PVector& PVector::sub(PVector& v) {
    this->x -= v.x;
    this->y -= v.y;
    return *this;
}
// ---------------------------------------------------------------------------------------------------------------------

PVector& PVector::mult(float value) {
    this->x *= value;
    this->y *= value;
    return *this;
}
// ---------------------------------------------------------------------------------------------------------------------

PVector& PVector::div(float value) {
    this->x /= value;
    this->y /= value;
    return *this;
}
// ---------------------------------------------------------------------------------------------------------------------

PVector& PVector::normalize(void) {
    float m = this->mag();
    return this->div(m);
}
// ---------------------------------------------------------------------------------------------------------------------

float PVector::mag(void) {
    return sqrt(this->x * this->x + this->y * this->y);
}
// ---------------------------------------------------------------------------------------------------------------------

float PVector::heading(void) {
    return atan2(this->y, this->x);
}
// ---------------------------------------------------------------------------------------------------------------------